CREATE TABLE "accounts" (
  "id" bigserial PRIMARY KEY,
  "owner" varchar NOT NULL,
  "balance" bigint NOT NULL,
  "currency" varchar NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT (now())
);

CREATE TABLE "entries" (
  "id" bigserial PRIMARY KEY,
  "account_id" bigint NOT NULL,
  "amount" bigint NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT (now())
);

CREATE TABLE "transfers" (
  "id" bigserial PRIMARY KEY,
  "from_account_id" bigint NOT NULL,
  "to_account_id" bigint NOT NULL,
  "amount" bigint NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT (now())
);

	1.	Account (계좌):
	•	고객이 은행에 개설한 계좌를 의미합니다. 은행에서의 모든 거래는 특정 계좌와 연관되어 있으며, 각 계좌에는 고유한 식별 번호, 잔액 정보 등이 포함됩니다.
	•	계좌 유형에는 예금 계좌, 적금 계좌, 대출 계좌 등 여러 종류가 있을 수 있습니다.
	2.	Entry (거래 기록):
	•	특정 계좌에서 발생한 거래의 기록을 의미합니다. 예를 들어, 입금, 출금, 이체 등 거래가 발생하면 이를 Entry로 기록합니다.
	•	Entry에는 거래 날짜, 거래 금액, 거래 유형(입금, 출금 등), 관련 계좌 정보 등이 포함됩니다.
	3.	Transfer (이체):
	•	하나의 계좌에서 다른 계좌로 자금이 이동하는 것을 의미합니다.
	•	은행 간 이체 또는 같은 은행 내에서의 계좌 간 이체가 포함됩니다.
	•	Transfer는 두 계좌 간의 거래를 발생시키며, 두 개의 entry로 기록됩니다. 한 계좌에서는 금액이 감소하고, 다른 계좌에서는 증가하는 방식입니다.
	4.	DB (Database):
	•	은행의 모든 계좌, 거래 기록, 이체 정보를 저장하는 데이터베이스입니다.
	•	모든 거래와 계좌에 대한 데이터는 DB에서 관리되며, 은행의 핵심 시스템 중 하나입니다. 이를 통해 계좌 잔액을 추적하고, 거래 내역을 확인할 수 있습니다.